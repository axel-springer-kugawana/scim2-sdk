package dev.axelspringerkugawana.scim2.schema.data.schema;

import dev.axelspringerkugawana.scim2.schema.data.Attribute;
import dev.axelspringerkugawana.scim2.schema.data.AttributeSet;
import lombok.Data;
import lombok.EqualsAndHashCode;

import java.util.Arrays;

/**
 * author: suvera
 * date: 10/17/2020 12:46 AM
 */
@SuppressWarnings("unused")
@EqualsAndHashCode(callSuper = true)
@Data
public class SchemaDefinition extends AttributeSet {
    private static final SchemaDefinition instance = new SchemaDefinition();

    public static SchemaDefinition getInstance() {
        return instance;
    }

    private SchemaDefinition() {
        addAttribute(Attribute.of("name")
                .setDescription("The schema's human-readable name. When applicable, service providers MUST specify the name, e.g., 'User'.")
                .setType("string")
                .setCaseExact(false)
                .setMultiValued(false)
                .setMutability("readOnly")
                .setRequired(false)
                .setReturned("default")
                .setUniqueness("none")
        );

        addAttribute(Attribute.of("description")
                .setDescription("The schema's human-readable description. When applicable, service providers MUST specify the description.")
                .setType("string")
                .setCaseExact(false)
                .setMultiValued(false)
                .setMutability("readOnly")
                .setRequired(false)
                .setReturned("default")
                .setUniqueness("none")
        );

        addAttribute(Attribute.of("attributes")
                .setDescription("A complex attribute that includes the attributes of a schema.")
                .setType("complex")
                .setCaseExact(false)
                .setMultiValued(true)
                .setMutability("readOnly")
                .setRequired(true)
                .setReturned("default")
                .setUniqueness("none")
                .addSubAttribute(Attribute.of("name")
                        .setDescription("The attribute's name.")
                        .setType("string")
                        .setCaseExact(true)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(true)
                        .setReturned("default")
                        .setUniqueness("none")
                )
                .addSubAttribute(Attribute.of("type")
                        .setDescription("The attribute's data type. Valid values include 'string', 'complex', 'boolean', 'decimal', 'integer', 'dateTime', 'reference', 'binary'.")
                        .setType("string")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(true)
                        .setReturned("default")
                        .setUniqueness("none")
                        .setCanonicalValues(Arrays.asList("string", "complex", "boolean", "decimal", "integer", "dateTime", "reference", "binary"))
                )
                .addSubAttribute(Attribute.of("description")
                        .setDescription("A human-readable description of the attribute.")
                        .setType("string")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                )
                .addSubAttribute(Attribute.of("multiValued")
                        .setDescription("A Boolean value indicating an attribute's plurality.")
                        .setType("boolean")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(true)
                        .setReturned("default")
                        .setUniqueness("none")
                )
                .addSubAttribute(Attribute.of("required")
                        .setDescription("A Boolean value indicating whether or not the attribute is required.")
                        .setType("boolean")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(true)
                        .setReturned("default")
                        .setUniqueness("none")
                )
                .addSubAttribute(Attribute.of("canonicalValues")
                        .setDescription("A collection of canonical values. When applicable, service providers MUST specify the canonical types, e.g., 'work', 'home'.")
                        .setType("complex")
                        .setCaseExact(false)
                        .setMultiValued(true)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                )
                .addSubAttribute(Attribute.of("caseExact")
                        .setDescription("A Boolean value indicating whether or not a string attribute is case sensitive.")
                        .setType("boolean")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                )
                .addSubAttribute(Attribute.of("mutability")
                        .setDescription("Indicates whether or not an attribute is modifiable.")
                        .setType("string")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                        .setCanonicalValues(Arrays.asList("readOnly", "readWrite", "immutable", "writeOnly"))
                )
                .addSubAttribute(Attribute.of("returned")
                        .setDescription("Indicates when an attribute is returned in a response (e.g., to a query).")
                        .setType("string")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                        .setCanonicalValues(Arrays.asList("always", "never", "default", "request"))
                )
                .addSubAttribute(Attribute.of("uniqueness")
                        .setDescription("Indicates how unique a value must be.")
                        .setType("string")
                        .setCaseExact(false)
                        .setMultiValued(false)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                        .setCanonicalValues(Arrays.asList("none", "server", "global"))
                )
                .addSubAttribute(Attribute.of("referenceTypes")
                        .setDescription("Used only with an attribute of type 'reference'. Specifies a SCIM resourceType that a reference attribute MAY refer to, e.g., 'User'.")
                        .setType("string")
                        .setCaseExact(false)
                        .setMultiValued(true)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                        .setCanonicalValues(Arrays.asList("scim", "external", "uri", "User", "Group"))
                )
                .addSubAttribute(Attribute.of("subAttributes")
                        .setDescription("Used to define the sub-attributes of a complex attribute.")
                        .setType("complex")
                        .setCaseExact(false)
                        .setMultiValued(true)
                        .setMutability("readOnly")
                        .setRequired(false)
                        .setReturned("default")
                        .setUniqueness("none")
                        .addSubAttribute(Attribute.of("name")
                                .setDescription("The attribute's name.")
                                .setType("string")
                                .setCaseExact(true)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(true)
                                .setReturned("default")
                                .setUniqueness("none")
                        )
                        .addSubAttribute(Attribute.of("type")
                                .setDescription("The attribute's data type. Valid values include 'string', 'complex', 'boolean', 'decimal', 'integer', 'dateTime', 'reference', 'binary'.")
                                .setType("string")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(true)
                                .setReturned("default")
                                .setUniqueness("none")
                                .setCanonicalValues(Arrays.asList("string", "complex", "boolean", "decimal", "integer", "dateTime", "reference", "binary"))
                        )
                        .addSubAttribute(Attribute.of("description")
                                .setDescription("A human-readable description of the attribute.")
                                .setType("string")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                        )
                        .addSubAttribute(Attribute.of("multiValued")
                                .setDescription("A Boolean value indicating an attribute's plurality.")
                                .setType("boolean")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(true)
                                .setReturned("default")
                                .setUniqueness("none")
                        )
                        .addSubAttribute(Attribute.of("required")
                                .setDescription("A Boolean value indicating whether or not the attribute is required.")
                                .setType("boolean")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(true)
                                .setReturned("default")
                                .setUniqueness("none")
                        )
                        .addSubAttribute(Attribute.of("canonicalValues")
                                .setDescription("A collection of canonical values. When applicable, service providers MUST specify the canonical types, e.g., 'work', 'home'.")
                                .setType("complex")
                                .setCaseExact(false)
                                .setMultiValued(true)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                        )
                        .addSubAttribute(Attribute.of("caseExact")
                                .setDescription("A Boolean value indicating whether or not a string attribute is case sensitive.")
                                .setType("boolean")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                        )
                        .addSubAttribute(Attribute.of("mutability")
                                .setDescription("Indicates whether or not an attribute is modifiable.")
                                .setType("string")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                                .setCanonicalValues(Arrays.asList("readOnly", "readWrite", "immutable", "writeOnly"))
                        )
                        .addSubAttribute(Attribute.of("returned")
                                .setDescription("Indicates when an attribute is returned in a response (e.g., to a query).")
                                .setType("string")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                                .setCanonicalValues(Arrays.asList("always", "never", "default", "request"))
                        )
                        .addSubAttribute(Attribute.of("uniqueness")
                                .setDescription("Indicates how unique a value must be.")
                                .setType("string")
                                .setCaseExact(false)
                                .setMultiValued(false)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                                .setCanonicalValues(Arrays.asList("none", "server", "global"))
                        )
                        .addSubAttribute(Attribute.of("referenceTypes")
                                .setDescription("Used only with an attribute of type 'reference'. Specifies a SCIM resourceType that a reference attribute MAY refer to, e.g., 'User'.")
                                .setType("string")
                                .setCaseExact(false)
                                .setMultiValued(true)
                                .setMutability("readOnly")
                                .setRequired(false)
                                .setReturned("default")
                                .setUniqueness("none")
                                .setCanonicalValues(Arrays.asList("scim", "external", "uri", "User", "Group"))
                        )
                )
        );

    }
}
